
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $http_host [$time_local] "$request" '
                      '$upstream_cache_status $status $body_bytes_sent "$http_referer" '
                      '"$http_x_forwarded_for" "$request_body"';
    #CUSTOM added  "$request_body"

    access_log  /logs/nginx-access.log  main;
    #CUSTOM moved to /logs volume

# CUSTOM Define caching
    proxy_cache_path /data/cache levels=1:2 keys_zone=my_cache:5m max_size=100g inactive=60m;
    proxy_cache my_cache;
    proxy_cache_valid 200 302 24h; # Cache successful responses
    proxy_cache_valid 304      5m; # Cache not-changed responses
    proxy_cache_valid 404      1m; # Cache 404 errors
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  600;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

    # CUSTOM Catch all other server names, ratelimit responses and send deny access.
    limit_req_zone $binary_remote_addr zone=adddelay:2m rate=5r/m;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:2m;
    server {
        listen       443  ssl;
        server_name  ~^.*$;
        location /{
            keepalive_timeout 0;
            sendfile off;
            add_header Last-Modified $date_gmt;
            add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            if_modified_since off;
            expires off;
            etag off;
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            limit_req    zone=adddelay burst=100;
            limit_rate 50;
            limit_conn conn_limit_per_ip 1;
            limit_req_status 403;
            add_header   Cache-Control no-cache;
            return       403;
        }
    }
}
